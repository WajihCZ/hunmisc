diff -u ../../../1/liblinear/python/liblinear.py ./liblinear.py
--- ../../../1/liblinear/python/liblinear.py	2013-01-21 19:03:19.000000000 +0100
+++ ./liblinear.py	2013-10-31 12:58:18.774240569 +0100
@@ -10,7 +10,7 @@
 	if sys.platform == 'win32':
 		liblinear = CDLL(path.join(dirname, r'..\windows\liblinear.dll'))
 	else:
-		liblinear = CDLL(path.join(dirname, '../liblinear.so.1'))
+		liblinear = CDLL(path.join(dirname, 'liblinear/liblinear.so.1'))
 except:
 # For unix the prefix 'lib' is not considered.
 	if find_library('linear'):
@@ -47,14 +47,36 @@
 	def __str__(self):
 		return '%d:%g' % (self.index, self.value)
 
+def gen_feature_nodearray_from_array(xi, feature_max=None, issparse=True):
+	values = xi
+	if feature_max:
+		assert(isinstance(feature_max, int))
+		values = filter(lambda x: x[0] <= feature_max, values)
+	if issparse: 
+		values = filter(lambda x: x[1] != 0, values)
+
+	values = sorted(values, key=lambda x: x[0])
+	ret = (feature_node * (len(values)+2))()
+	ret[-1].index = -1 # for bias term
+	ret[-2].index = -1
+	for idx, (feature, value) in enumerate(values):
+		ret[idx].index = feature
+		ret[idx].value = value
+	max_idx = 0
+	if values: 
+		max_idx = values[-1][0]
+	return ret, max_idx
+
 def gen_feature_nodearray(xi, feature_max=None, issparse=True):
 	if isinstance(xi, dict):
 		index_range = xi.keys()
 	elif isinstance(xi, (list, tuple)):
 		xi = [0] + xi  # idx should start from 1
 		index_range = range(1, len(xi))
+	elif isinstance(xi, Array):
+		return gen_feature_nodearray_from_array(xi, feature_max, issparse)
 	else:
-		raise TypeError('xi should be a dictionary, list or tuple')
+		raise TypeError('xi should be a dictionary, list, tuple or ctypes.Array')
 
 	if feature_max:
 		assert(isinstance(feature_max, int))
Only in .: liblinear.py.orig
Only in .: sanyi.diff
